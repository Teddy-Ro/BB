import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from telegram.request import HTTPXRequest

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = '8201264809:AAEc4BnUcY2NjyiwQdZP11zrhFHshJWTDno'
OWNER_IDS = [734572580, 1295431856]
BLOCKED_USERS_IDS = [123456789, 987654321]
BLOCKED_USERS_USERNAMES = []

group_settings = {}



def is_enabled(chat_id):
    return group_settings.get(chat_id, False)

async def enable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if not is_owner(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
        return
    group_settings[chat_id] = True
    await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ!")

async def disable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if not is_owner(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
        return
    group_settings[chat_id] = False
    await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–æ!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    enabled = group_settings.get(chat_id, False)
    if enabled:
        msg = "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ *–í–ö–õ–Æ–ß–ï–ù–û* –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
    else:
        msg = "üîï –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ *–í–´–ö–õ–Æ–ß–ï–ù–û* –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
    await update.message.reply_text(msg, parse_mode="Markdown")


def is_owner(user_id: int) -> bool:
    return user_id in OWNER_IDS

def is_blocked(user_id: int, username: str = None) -> bool:
    return user_id in BLOCKED_USERS_IDS or (username and username in BLOCKED_USERS_USERNAMES)

def escape_markdown(text: str) -> str:
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    return ''.join("\\" + c if c in escape_chars else c for c in (text or ""))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    owner_text = "\n\nüîê - –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞" if is_owner(user_id) else ""

    menu_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç –ú–∏—Ö–∞—á–∞.\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /enable - –í–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
        "‚Ä¢ /disable - –í—ã–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
        "‚Ä¢ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "‚Ä¢ /myid - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
        "‚Ä¢ /block <ID> - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–ª–æ–∫–ª–∏—Å—Ç\n"
        "‚Ä¢ /unblock <ID> - –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–ª–æ–∫–ª–∏—Å—Ç–∞\n"
        "‚Ä¢ /block_username <username> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username\n"
        "‚Ä¢ /unblock_username <username> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username\n"
        "‚Ä¢ /blocklist - –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫–ª–∏—Å—Ç"
        f"{owner_text}"
    )

    await update.message.reply_text(menu_text)



async def getmyid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    userid = update.effective_user.id
    username = escape_markdown(update.effective_user.username or "–Ω–µ—Ç")
    first_name = escape_markdown(update.effective_user.first_name or "")
    await update.message.reply_text(
        f"ID: {userid}\nUsername: {username}\n–ò–º—è: {first_name}",
        parse_mode="Markdown"
    )

async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_owner(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!")
        return
    if not context.args:
        await update.message.reply_text("/block <id>")
        return
    try:
        blocked_id = int(context.args[0])
        if blocked_id not in BLOCKED_USERS_IDS:
            BLOCKED_USERS_IDS.append(blocked_id)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {blocked_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ID: {blocked_id} by {user_id}")
        else:
            await update.message.reply_text(f"ID {blocked_id} —É–∂–µ –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ.")
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

async def block_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_owner(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!")
        return
    if not context.args:
        await update.message.reply_text("/block_username <username>")
        return
    username = context.args[0].lstrip("@")
    username = username.casefold()
    if username not in BLOCKED_USERS_USERNAMES:
        BLOCKED_USERS_USERNAMES.append(username)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω username: @{username} by {user_id}")
    else:
        await update.message.reply_text(f"@{username} —É–∂–µ –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ.")

async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_owner(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!")
        return
    if not context.args:
        await update.message.reply_text("/unblock <id>")
        return
    try:
        unblocked_id = int(context.args[0])
        if unblocked_id in BLOCKED_USERS_IDS:
            BLOCKED_USERS_IDS.remove(unblocked_id)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {unblocked_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            logger.info(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ID: {unblocked_id} by {user_id}")
        else:
            await update.message.reply_text(f"ID {unblocked_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ.")
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

async def unblock_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_owner(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!")
        return
    if not context.args:
        await update.message.reply_text("/unblock_username <username>")
        return
    username = context.args[0].lstrip("@")
    username = username.casefold()
    if username in BLOCKED_USERS_USERNAMES:
        BLOCKED_USERS_USERNAMES.remove(username)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        logger.info(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω username: @{username} by {user_id}")
    else:
        await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ.")

async def show_blocklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_owner(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!")
        return

    ids = "\n".join(f"`{uid}`" for uid in BLOCKED_USERS_IDS) or "-"
    usernames = "\n".join(f"@{escape_markdown(u)}" for u in BLOCKED_USERS_USERNAMES) or "-"

    msg = (
        "üõë *–¢–µ–∫—É—â–∏–π –±–ª–æ–∫–ª–∏—Å—Ç:*\n"
        "\n*ID:*\n" + ids +
        "\n\n*Username:*\n" + usernames
    )
    await update.message.reply_text(msg, parse_mode="Markdown")

async def sticker_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    chat_id = update.effective_chat.id
    if not is_enabled(chat_id):
        return
    # –ò–∑–≤–ª–µ—á—å user_id –∏ username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    user_id = update.effective_user.id
    username = (update.effective_user.username or "").casefold()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª–æ–∫–ª–∏—Å—Ç–∞—Ö ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
    if is_blocked(user_id, username):
        try:
            await update.message.delete()
            logger.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç: {user_id}, username: {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    request = HTTPXRequest(connection_pool_size=8)
    application = Application.builder().token(BOT_TOKEN).request(request).build()

    application.add_handler(CommandHandler("enable", enable, filters=filters.ChatType.GROUPS))
    application.add_handler(CommandHandler("disable", disable, filters=filters.ChatType.GROUPS))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("myid", getmyid))
    application.add_handler(CommandHandler("block", block_user))
    application.add_handler(CommandHandler("block_username", block_username))
    application.add_handler(CommandHandler("unblock", unblock_user))
    application.add_handler(CommandHandler("unblock_username", unblock_username))
    application.add_handler(CommandHandler("blocklist", show_blocklist))

    application.add_handler(MessageHandler(filters.Sticker.ALL, sticker_handler))

    application.add_error_handler(error_handler)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üëë –í–ª–∞–¥–µ–ª—å—Ü—ã: {OWNER_IDS}")
    logger.info(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {BLOCKED_USERS_IDS}")
    logger.info(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ username: {BLOCKED_USERS_USERNAMES}")

    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == "__main__":
    main()
